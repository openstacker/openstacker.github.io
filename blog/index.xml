<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:base="https://openstacker.github.io">
  <title>
    Blog  </title>
    <link href="https://openstacker.github.io/blog/index.xml" rel="self" />
  
    <link href="https://openstacker.github.io/blog/"/>
  
    
  <updated>2018-06-08T15:42:13Z</updated>

  <id>https://openstacker.github.io/blog/index.xml</id>

      <entry>
    <title type="html">How to debug golang in vscode</title>
    <author><name>Feilong Wang</name></author>
    <link href="https://openstacker.github.io/blog/2018/debug-go"/>
    <updated>2018-06-05T14:02:00Z</updated>
    <published>2018-06-05T14:02:00Z</published>
    <id>/blog/2018/debug-go</id>
        <category   scheme="/blog/tags"
                term="go"
                label="Go" />
        <category   scheme="/blog/tags"
                term="debug"
                label="Debug" />
    
    <content type="html">
                  &lt;p&gt;最近因为折腾Magnum的关系，还是需要看一些go的代码，但是发现go语言虽好，但它的debug却仍然非常让人很不爽。不像Python, Go作为编译型语言，编译后是一个单独的二进制文件，不能像Python一样随时加入 
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pdb&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;n&#34;&gt;pdb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_trace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;
就可以加入断点。所以不得不花了点时间研究了一下，发现vscode通过安装devle 插件，还是实现在vscode里debug Go的代码的，不算是特别方便，但能用。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开vscode的编辑器，选择左边的debug 菜单项后会出现如下图所示的debug界面&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;illustration center&#34;&gt;
  &lt;img src=&#34;/media/images/blog/2018/debug-go-1.png&#34;&gt;
  &lt;/a&gt;
  &lt;figcaption&gt;创建配置文件&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;ol&gt;
&lt;li&gt;这时从左上角的下拉列表里就可以选择给你的某个项目加一个debug 配置文件，比如我们选择cloud-provider-openstack。默认情况下是生成一份空的配置文件，如下所示。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&#34;err&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Use&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;IntelliSense&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;learn&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;about&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;possible&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;attributes.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&#34;err&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Hover&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;descriptions&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;existing&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;attributes.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&#34;err&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;For&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;more&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;information,&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;visit:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;https://go.microsoft.com/fwlink/?linkid=830387&lt;/span&gt;&lt;br /&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;quot;version&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;0.2.0&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;quot;configurations&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;br /&gt;        &lt;br /&gt;        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Launch&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;br /&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;go&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;br /&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;quot;request&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;launch&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;br /&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;quot;mode&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;debug&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;br /&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;quot;remotePath&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;br /&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;quot;port&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2345&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;br /&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;quot;host&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;br /&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;quot;program&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;${fileDirname}&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;br /&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;quot;env&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{},&lt;/span&gt;&lt;br /&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;quot;args&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[],&lt;/span&gt;&lt;br /&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;quot;showLog&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;br /&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
3. 我们需要对它做一个简单的修改，变成这样。这里要修改的地方主要有，name, program, 和args, 当然如果你的程序不支持或者不需要args，那么完全可以忽略。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&#34;err&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Use&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;IntelliSense&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;learn&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;about&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;possible&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;attributes.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&#34;err&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Hover&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;descriptions&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;existing&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;attributes.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&#34;err&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;For&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;more&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;information,&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;visit:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;https://go.microsoft.com/fwlink/?linkid=830387&lt;/span&gt;&lt;br /&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;quot;version&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;0.2.0&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;quot;configurations&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;br /&gt;        &lt;br /&gt;        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;k8s-keystone-go&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;br /&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;go&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;br /&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;quot;request&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;launch&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;br /&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;quot;mode&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;debug&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;br /&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;quot;remotePath&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;br /&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;quot;port&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2345&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;br /&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;quot;host&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;br /&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;quot;program&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;${workspaceFolder}/cmd/k8s-keystone-auth/main.go&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;br /&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;quot;env&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{},&lt;/span&gt;&lt;br /&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;quot;args&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;--keystone-url=http://192.168.122.1/identity/v3/&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;br /&gt;                     &lt;span class=&#34;s2&#34;&gt;&amp;quot;--tls-cert-file=/etc/kubernetes/certs/server.crt&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;br /&gt;                     &lt;span class=&#34;s2&#34;&gt;&amp;quot;--tls-private-key-file=/etc/kubernetes/certs/server.key&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;br /&gt;                     &lt;span class=&#34;s2&#34;&gt;&amp;quot;--keystone-policy-file=/etc/kubernetes/keystone_webhook_policy.json&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;br /&gt;                     &lt;span class=&#34;s2&#34;&gt;&amp;quot;-v=6&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;&lt;br /&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;quot;showLog&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;br /&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;4. 最后一步就是加断点了，和其他编辑器类似，直接点击左边的边框就可以给当前行加断点。然后直接按F5或者通过菜单执行debug就可以了，具体见下图。&lt;/p&gt;
&lt;figure class=&#34;illustration center&#34;&gt;
  &lt;img src=&#34;/media/images/blog/2018/debug-go-2.png&#34;&gt;
  &lt;/a&gt;
  &lt;figcaption&gt;执行debug&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;更多详细的配置，请参考下面两个链接，enjoy your go journey!&lt;/p&gt;
&lt;p&gt;[1] https://github.com/Microsoft/vscode-go/wiki/Debugging-Go-code-using-VS-Code
[2] https://code.visualstudio.com/docs/editor/debugging#_launch-configurations&lt;/p&gt;      
          </content>
  </entry>
    <entry>
    <title type="html">新西兰华人IT工程师协会 -- CITANZ</title>
    <author><name>Feilong Wang</name></author>
    <link href="https://openstacker.github.io/blog/2018/cita-nz"/>
    <updated>2018-05-25T14:02:00Z</updated>
    <published>2018-05-25T14:02:00Z</published>
    <id>/blog/2018/cita-nz</id>
        <category   scheme="/blog/tags"
                term="Wellington"
                label="Wellington" />
        <category   scheme="/blog/tags"
                term="CITA"
                label="Cita" />
    
    <content type="html">
                  &lt;p&gt;这篇博客放在这很久了，一直没空写完，趁着今天刚开完OpenStack社区的周会，我想尽量
捋一捋思路，把它写完。&lt;/p&gt;
&lt;h2&gt;为什么要瞎折腾&lt;/h2&gt;
&lt;p&gt;CITA 的前身是我们在惠灵顿搞的华人IT meetup，依托于我们已经有的微信群（如果有国内
的朋友想过来，或者新西兰其他城市的同仁想来惠灵顿发展，可以先加我们的大群了解一下情况。
我们的微信群的名字是&lt;code&gt;风城天朝IT达人群&lt;/code&gt;）。Meetup 每月组织一次，每次请一位 speaker
分享一个技术或非技术话题，但基本都是围绕着IT相关的。2016年11月我和孔令贤讲的第一期
话题，关于OpenStack的一个introduction。到目前为止，我们已经成功的组织了近二十期的
meetup，大家普遍反响强烈。&lt;/p&gt;
&lt;p&gt;其实我不止一次提到过，我说我其实是典型的IT男，在国内的时候我对这种抛头露面，四处张罗
的组织活动其实是排斥的。但到了国外之后，慢慢开始愿意折腾这些了。我自我刨析过可能的几个
原因：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;年龄大了
   这个很有意思，所谓岁月是把杀猪刀。很多小时候或年轻的时候不喜欢的东西，上了年纪
   可能就喜欢了。打个不恰当的比方，我小时候特别不喜欢吃馅，家里吃饺子，我都把馅挖出
   来只吃皮。但现在我非常喜欢吃饺子，有机会回哈尔滨也是最喜欢吃东方饺子王。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;人在异乡
   这个应该是主要原因吧。除了“人在异乡为异客，每逢佳节倍思亲”的这种挥不去的思亲之情，
   还有就是人在异乡的这种对友情的强烈渴望，渴望有更多的朋友，渴望有人能在工作和家庭
   之外一起扯淡唠嗑，遇到问题彼此互相帮助。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;孤独无聊
   这其实是我老婆说，我自己倒不觉得和孤独无聊有关系。每天弄俩孩子忙的脚打后脑勺，从
   来都不知道无聊是什么感觉。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;CITA 的目标&lt;/h2&gt;
&lt;p&gt;CITA目前是新西兰正式注册的非盈利组织，当然这边非营利组织分很多种，我们这种叫Society，
不过我不确定翻译成中文应该怎么翻。目前我们在5月份刚刚完成了注册工作，其他各项工作
也在逐步推进过程中。组织结构上，我们会有committee, working group 和member group，
各司其职。&lt;/p&gt;
&lt;p&gt;说回CITA的目标，CITA的目标往大了说，我们希望做新西兰最专业的华人IT组织。往小了说
我们希望做一个团结互助的华人IT组织。其实对于CITA的目标，我个人是一直存在着某种理想
主义的，我希望这是一个能够每一个人都去贡献的社区组织。&lt;/p&gt;
&lt;h2&gt;了解更多&lt;/h2&gt;
&lt;p&gt;如果大家对我们的工作感兴趣，可以了解一下 https://github.com/CITA-NZ/Society-Documentation
也可以发邮件到 feilong.wang@cita.org.nz 和我直接联系。&lt;/p&gt;      
          </content>
  </entry>
    <entry>
    <title type="html">calico网络问题的debug过程</title>
    <author><name>Feilong Wang</name></author>
    <link href="https://openstacker.github.io/blog/2018/calico-debug"/>
    <updated>2018-03-22T14:37:00Z</updated>
    <published>2018-03-22T14:37:00Z</published>
    <id>/blog/2018/calico-debug</id>
        <category   scheme="/blog/tags"
                term="Calico"
                label="Calico" />
        <category   scheme="/blog/tags"
                term="Kubernetes"
                label="Kubernetes" />
    
    <content type="html">
                  &lt;p&gt;这篇blog 主要是用来记录我最近在开发Magnum的过程中，集成calico和kuberntes的过程中所遇到的一些问题，以及我对calico的一些粗浅的理解。&lt;/p&gt;
&lt;h2&gt;什么是Calico&lt;/h2&gt;
&lt;p&gt;calico 同flannel类似，主要为容器提供网络支持。下面的文字摘自calico官方网站对其的描述。&lt;/p&gt;
&lt;p&gt;Calico provides secure network connectivity for containers and virtual machine workloads.&lt;/p&gt;
&lt;p&gt;Calico creates and manages a flat layer 3 network, assigning each workload a fully routable IP address. Workloads can communicate without IP encapsulation or network address translation for bare metal performance, easier troubleshooting, and better interoperability. In environments that require an overlay, Calico uses IP-in-IP tunneling or can work with other overlay networking such as flannel.&lt;/p&gt;
&lt;p&gt;Calico also provides dynamic enforcement of network security rules. Using Calico’s simple policy language, you can achieve fine-grained control over communications between containers, virtual machine workloads, and bare metal host endpoints.&lt;/p&gt;
&lt;h2&gt;为什么需要Calico&lt;/h2&gt;
&lt;p&gt;通常提到calico必然提到网络隔离，这是calico 区别于Flannel的主要一点。因此，使用Calico主要是为了实现不同namespaces的网络隔离。&lt;/p&gt;
&lt;h2&gt;calico 网络问题的debug过程&lt;/h2&gt;
&lt;p&gt;这个问题实际上是我最近调试 calico 和 kubernetes所遇到的一个实际问题。具体症状是这样的：通过Magnum创建k8s 集群后，
kuberntes dashboard pod和coreDNS pod周期性的重启，而且比较频繁。其他pod正常。&lt;/p&gt;
&lt;p&gt;下面是我的分析过程，参考了这篇文章()&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;在K8s中使用Calico的一些坑&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;k8s master node 到底需不需要 calico-node&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pod 和 k8s api server 的通信问题&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;      
          </content>
  </entry>
    <entry>
    <title type="html">Magnum 入坑指南之二</title>
    <author><name>Feilong Wang</name></author>
    <link href="https://openstacker.github.io/blog/2018/magnum-2"/>
    <updated>2018-03-19T07:37:00Z</updated>
    <published>2018-03-19T07:37:00Z</published>
    <id>/blog/2018/magnum-2</id>
        <category   scheme="/blog/tags"
                term="Magnum"
                label="Magnum" />
        <category   scheme="/blog/tags"
                term="Kubernetes"
                label="Kubernetes" />
    
    <content type="html">
                  &lt;p&gt;截止到这篇blog动笔时，当前的OpenStack master版本是Rocky，目前Magnum所支持的Kubernetes的扩展功能有：
dashboard, DNS, proxy, 基于 Heapster的监控，基于Prometheus的监控，基于traefik的Ingress。此外还
支持两种network driver: flannel 和 calico。关于network driver部分，我后续会再专门写一篇
阐述。&lt;/p&gt;
&lt;p&gt;在上一篇&lt;a href=&#34;http://openstacker.github.io/blog/2017/magnum-architecture&#34;&gt;Magnum 入坑指南之一&lt;/a&gt;里已经介绍了Magnum的基本安装和使用，
其实说kubernetes是坑，以我做openstack多年的经验来说不算过分，kubernetes本身经过多年的发展，已经日趋稳定，但是围绕在它周边的众多
附加服务之间的各种组合，真的是让人头大。不同服务之间的不同版本也许完全不能工作，同一个服务的不同版本因为快速迭代可能并不兼容，凡此种种。
所以我现在写的这些也许过些日子回过头来看都很容易，但此时此刻，要想搭建一个production ready的k8s集群真的不是一般普通用户能轻松搞定的。
当然由此也体现出此类 managed k8s service 的价值所在。&lt;/p&gt;
&lt;p&gt;书接上文，这篇主要说说 Magnum里面基于k8s所提供的其他几个周边服务。&lt;/p&gt;
&lt;h2&gt;k8s dashboard&lt;/h2&gt;
&lt;p&gt;Mangum 在部署 k8s 时默认会安装 k8s dashboard, 访问的方式也很简单，可以通过 k8s 
proxy 从本机的浏览器进行访问。首先，在本机运行&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl proxy&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
然后在本地的浏览器里输入：http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/&lt;/p&gt;
&lt;h2&gt;Prometheus 监控&lt;/h2&gt;
&lt;p&gt;不同于其他几个服务，Prometheus在Magnum中是需要通过label enable的，默认并不开启。如果要开启，则需要在template 或者创建cluster的时候指定
lable &#34;&#34;prometheus_monitoring=true&#34;&#34;。在我写这篇文章时，Magnum中的Prometheus存在一个Bug，原因是缺失RBAC相关信息，Patch在这里
https://review.openstack.org/553654 截止到目前 Magnum中的Prometheus 仍然采用NodePort的方式访问，默认端口是30900, 所以在我的测试
环境中可以直接通过 http://&amp;lt; node&#39;s floating IP &amp;gt;:30900/访问Prometheus的dashboard。这里值得注意的是，判断是否能正确拿到数据的标准就是
在界面上能否绘制某个指标的图形，而在此之前最好先检查 Status -&amp;gt; Targets里是否能看到数据。否则Targets里拿不到数据的话，是无法绘制图形的。&lt;/p&gt;      
          </content>
  </entry>
    <entry>
    <title type="html">老王家常菜之地三鲜</title>
    <author><name>Feilong Wang</name></author>
    <link href="https://openstacker.github.io/blog/2018/di-san-xian"/>
    <updated>2018-02-27T12:01:00Z</updated>
    <published>2018-02-27T12:01:00Z</published>
    <id>/blog/2018/di-san-xian</id>
        <category   scheme="/blog/tags"
                term="LAOWANG"
                label="Laowang" />
    
    <content type="html">
                  &lt;p&gt;我在写作方面是个比较懒惰的人，很多东西觉得自己会了，就懒得动笔/动手记录下来。但为了避免老年痴呆，中年油腻，我还是决定尽量将我在工作和生活中的一些点滴记录下来。&lt;/p&gt;
&lt;p&gt;我原来在北京的时候也做饭，但那时候没现在做的多，当然那时候孩子也小。在北京，不想做饭了，就出去吃，随便找个 mall, 两人100块钱其实就能吃的挺好。2014年出国之后，下馆子这事变难了，惠灵顿的中餐大部分都不好吃，虽然实际上我也没吃过几家。其中，有家叫长城的东北菜馆，我个人挺喜欢的，味道比较地道。我在哈尔滨前后大概呆了8年，从19岁离开家到哈尔滨上大学，到2007年研究生毕业离开哈尔滨，太多的回忆留在了哈尔滨。东北菜是我关于哈尔滨记忆的一个重要组成部分。&lt;/p&gt;
&lt;p&gt;其实东北菜严格意义上不算一个单独的菜系，但提到东北菜（其实我也就呆过黑龙江而已），我脑子里一般总能反映出这么几个菜：地三鲜，东北大拉皮，尖椒干豆腐，小鸡炖蘑菇等等。今天先说说地三鲜吧。&lt;/p&gt;
&lt;h2&gt;地三鲜&lt;/h2&gt;
&lt;p&gt;所谓地三鲜，主要的原料有这么几种蔬菜：茄子，土豆，青椒。基本都是最最常见的蔬菜，但是组合在一起的效果确是惊艳的。下面是我自己最近尝试的一种简易版本的地三鲜做饭，欢迎回家试试。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;一个茄子，去皮，切滚刀块，新西兰这边都是长茄子，我已然记不清东北到底用的什么茄子了，应该没什么区别&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一个土豆，去皮切滚刀块备用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;茄子和土豆放入微波炉大火加热4分钟左右，这一步可以让后面茄子和土豆过油时比较省油&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一个青椒，青椒不要用刀切，用手掰成你在当地见到的最大面额的硬币大小&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;大蒜一头，切小块和青椒放一起备用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;平常吃饭的小碗，小半碗李锦记生抽，放入适量淀粉，撒点白胡椒粉备用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将加热过的茄子和土豆过油，捞出后备用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用锅里剩下的油炒青椒和蒜末，炒香之后倒入过油后的茄子和土豆&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;翻炒后，加入前面调好的生抽淀粉勾芡，翻炒均匀后即可出锅&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我给我这道菜打80分吧，虽然味道不及饭店里做的，但贵在简单。这里补一句，其实我是个特别挑剔的人，体现在生活工作各个方面，从小挑食，不爱吃的基本一口不吃，所以这道地三鲜值得大家试试，欢迎反馈意见给我。&lt;/p&gt;      
          </content>
  </entry>
    <entry>
    <title type="html">Magnum 入坑指南之一</title>
    <author><name>Feilong Wang</name></author>
    <link href="https://openstacker.github.io/blog/2017/magnum-architecture"/>
    <updated>2017-06-23T12:01:00Z</updated>
    <published>2017-06-23T12:01:00Z</published>
    <id>/blog/2017/magnum-architecture</id>
        <category   scheme="/blog/tags"
                term="Magnum"
                label="Magnum" />
        <category   scheme="/blog/tags"
                term="OpenStack"
                label="Openstack" />
        <category   scheme="/blog/tags"
                term="Architecture"
                label="Architecture" />
        <category   scheme="/blog/tags"
                term="Kubernetes"
                label="Kubernetes" />
    
    <content type="html">
                  &lt;p&gt;现在容器大火，OpenStack走下坡路, Magnum 作为OpenStack中的容器相关项目最多也就算是不温不火吧。但实际上，很多客户的应用仍然是传统的Web应用，尤其在新西兰市场，很多客户也只是刚刚把应用从物理机迁移到我们的云上，实际使用上也仅仅是租个虚机，然后就不折腾了。离真正的原生云应用，或者容器化都有不短的距离。&lt;/p&gt;
&lt;h2&gt;架构&lt;/h2&gt;
&lt;p&gt;本来想先介绍架构，但其实Magnum的架构其实很简单，倒是涉及到容器和虚机网络的网络架构比较复杂。我后面会补一张图来解释网络架构．Magnum的架构简单来说就是通过Heat去安装指定的COE. 周边涉及的网络和存储也都是通过Heat来创建的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/media/images/blog/2017/800px-Magnum_architecture.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图引自 Magnum wiki(https://wiki.openstack.org/wiki/Magnum)&lt;/p&gt;
&lt;h2&gt;基本操作&lt;/h2&gt;
&lt;p&gt;通常来说，从头创建一个 COE cluster 需要以下步骤：&lt;/p&gt;
&lt;p&gt;１. 创建 keypair&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;openstack keypair create feilong --public-key .ssh/id_rsa.pub&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
2. 创建需要的镜像&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;openstack image create fedora-atomic --disk-format qcow2 --container-format bare --property &lt;span class=&#34;nv&#34;&gt;os_distro&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;fedora-atomic --file ./Fedora-Atomic-26-20170723.0.x86_64.qcow2&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
创建镜像时注意指定 os_distro 属性，大小写敏感，目前支持的情况如下表所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+-------------------+-------------------------+&lt;br /&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; COE               &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; os_distro               &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;br /&gt;+-------------------+-------------------------+&lt;br /&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; Kubernetes        &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; fedora-atomic, coreos   &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;br /&gt;+-------------------+-------------------------+&lt;br /&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; Swarm             &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; fedora-atomic           &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;br /&gt;+-------------------+-------------------------+&lt;br /&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; Mesos             &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; ubuntu                  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;br /&gt;+-------------------+-------------------------+&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
3. Create cluster template&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;openstack coe cluster template create --name k8s --image 2a21599f-a42f-4b12-9888-ae0600168f3c --keypair feilong --flavor c1.c1r2 --master-flavor c1.c1r2 --coe kubernetes --external-network public --fixed-network &amp;lt;NETWORK ID&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
4. Create cluster&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;openstack coe cluster create --name k8scluster --cluster-template k8s --node-count &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; --timeout &lt;span class=&#34;m&#34;&gt;30&lt;/span&gt; --label &lt;span class=&#34;nv&#34;&gt;kube_tag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;v1.9.3&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;Debug&lt;/h2&gt;
&lt;p&gt;Magnum的debug　分两部分，一部分是OpenStack层面的debug, 一部分是COE层面的debug。&lt;/p&gt;
&lt;p&gt;先说 OpenStack 层面的 debug, 如果是 devstack, 那么目前 devstack里的服务都是通过sytemd管理，那么起停相关服务的命令需要通过：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;systemctl restart/start/stop devstack@magnum-api&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
而查看 log，则需要通过 journalctl&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;journalctl -u devstack@magnum-api&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
OpenStack 部分的debug 比较简单，和debug OpenStack其他服务基本一致。Magnum　里遇到问题通常是在虚机里实际部署 COE 时失败，这时就需要 ssh 到虚机里去查看失败的原因．Magnum 中 COE的部署是通过 Heat的 Software Deployment执行的。Heat 会将事先准备好的脚本按顺序拷贝到虚机中，具体存放在 &lt;code&gt;/var/lib/cloud/instances/&amp;lt;instance_id&amp;gt;/scripts&lt;/code&gt; 因此debug起来也比较简单，如果在 &lt;code&gt;/var/log/cloud-init-output.log&lt;/code&gt; 和 &lt;code&gt;/var/log/cloud-init.log&lt;/code&gt; 中看到某个脚本比如 part-008 失败了，那么只需要手工执行 part-008 这个脚本，向里面加入简单的log 即可很容易的分析出失败的原因。&lt;/p&gt;
&lt;p&gt;此外，还有一部分脚本是通过 &lt;code&gt;heat-container-agent&lt;/code&gt; 来运行的，这部分脚本存放在 /var/lib/heat-config/heat-config-script, 而如果想查看这些脚本执行的log情况，则需要通过 &lt;code&gt;journalctl -u heat-container-agent&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;至此，假设你已经解决了所有的问题，在OpenStack 能看到COE Cluster 成功创建，状态为 Create Complete。那么基本上意味着 OpenStack部分是正常的。运行 &lt;code&gt;openstack coe cluster list&lt;/code&gt; 得到运行结果应该是这样的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;feilong@feilong-ThinkPad-X1-Carbon-2nd:~/devstack$ openstack coe cluster list&lt;br /&gt;+--------------------------------------+------------+---------+------------+--------------+-----------------+&lt;br /&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; uuid                                 &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; name       &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; keypair &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; node_count &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; master_count &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; status          &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;br /&gt;+--------------------------------------+------------+---------+------------+--------------+-----------------+&lt;br /&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; 9147e750-164a-4f4d-83cc-e5bf994b8098 &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; k8scluster &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; feilong &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;          &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;            &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; CREATE_COMPLETE &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;br /&gt;+--------------------------------------+------------+---------+------------+--------------+-----------------+&lt;br /&gt;feilong@feilong-ThinkPad-X1-Carbon-2nd:~/devstack$ openstack coe cluster show k8scluster&lt;br /&gt;+---------------------+------------------------------------------------------------+&lt;br /&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; Field               &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; Value                                                      &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;br /&gt;+---------------------+------------------------------------------------------------+&lt;br /&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; status              &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; CREATE_COMPLETE                                            &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; cluster_template_id &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; a6822337-1f5b-4266-8967-ff99d8cdb82c                       &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; node_addresses      &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;u&lt;span class=&#34;s1&#34;&gt;&amp;#39;172.24.4.13&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;                                           &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; uuid                &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; 9147e750-164a-4f4d-83cc-e5bf994b8098                       &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; stack_id            &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; a5aa62ee-fb44-4d76-b225-38811adab0a9                       &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; status_reason       &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; Stack CREATE completed successfully                        &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; created_at          &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2018&lt;/span&gt;-02-23T02:30:50+00:00                                  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; updated_at          &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2018&lt;/span&gt;-02-23T02:42:59+00:00                                  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; coe_version         &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; v1.9.3                                                     &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; labels              &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;u&lt;span class=&#34;s1&#34;&gt;&amp;#39;kube_tag&amp;#39;&lt;/span&gt;: u&lt;span class=&#34;s1&#34;&gt;&amp;#39;v1.9.3&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;                                   &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; faults              &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;                                                            &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; keypair             &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; feilong                                                    &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; api_address         &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; https://172.24.4.3:6443                                    &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; master_addresses    &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;u&lt;span class=&#34;s1&#34;&gt;&amp;#39;172.24.4.3&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;                                            &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; create_timeout      &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;120&lt;/span&gt;                                                        &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; node_count          &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;                                                          &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; discovery_url       &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; https://discovery.etcd.io/b1c310361853d748444c2c48a814ce4d &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; master_count        &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;                                                          &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; container_version   &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.12.6                                                     &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; name                &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; k8scluster                                                 &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; master_flavor_id    &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; ds1G                                                       &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; flavor_id           &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; ds1G                                                       &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;br /&gt;+---------------------+------------------------------------------------------------+&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
接下来，则需要验证 Kubernetes 自身的功能。这部分其实是最复杂的，当然也可能因为我个人对 k8s 还不够熟悉，而对 OpenStack 本身已经比较熟悉的关系。下面是我总结的在 debug k8s 基本功能时的一些简单的汇总。后面会陆续再单独开篇记录我学习 k8s 的经验。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;访问 API/Dashboard&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在 Magnum 中访问 k8s API 分两种方式，一种是从虚机内部访问，一种是本机远程访问。从虚机内部访问，没有任何限制，可以直接运行 kubectl 的各种命令。如果是从本机远程访问，则需要先运行&lt;code&gt;eval $(magnum cluster-config &amp;lt;cluster-name&amp;gt;)&lt;/code&gt; 获取证书，然后就可以正常运行 kubectl 的各种命令了。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;确认 k8s API 功能正常
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl get pods --all-namespaces&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;确认个 minion/worker 节点状态正常
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;fedora@k8scluster-llrejue2ujzv-master-0 ~&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;$ kubectl get nodes&lt;br /&gt;NAME                               STATUS     ROLES     AGE       VERSION&lt;br /&gt;k8scluster-llrejue2ujzv-minion-0   Ready      &amp;lt;none&amp;gt;    3d        v1.9.3&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建一个pod, 确认能够可以正常分配 IP，可以用下面的 yaml 文件创建一个 pod，
把下面的内容保存为文件 busybox.yaml
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apiVersion: v1&lt;br /&gt;kind: Pod&lt;br /&gt;metadata:&lt;br /&gt;  name: busybox&lt;br /&gt;  namespace: default&lt;br /&gt;spec:&lt;br /&gt;  containers:&lt;br /&gt;  - image: busybox&lt;br /&gt;    command:&lt;br /&gt;      - sleep&lt;br /&gt;      - &lt;span class=&#34;s2&#34;&gt;&amp;quot;3600&amp;quot;&lt;/span&gt;&lt;br /&gt;    imagePullPolicy: IfNotPresent&lt;br /&gt;    name: busybox&lt;br /&gt;restartPolicy: Always&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;
接下来运行 kubectl create -f busybox.yaml
即可成功创建一个 pod&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过 Magnum 按照的k8s 默认会安装 CoreDNS, 运行下面的代码可以验证 DNS 是否正常
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; busybox nslookup kubernetes&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;
未完待续...&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;      
          </content>
  </entry>
    <entry>
    <title type="html">Trove 的那些坑</title>
    <author><name>Feilong Wang</name></author>
    <link href="https://openstacker.github.io/blog/2017/trove-journey-1"/>
    <updated>2017-06-23T12:01:00Z</updated>
    <published>2017-06-23T12:01:00Z</published>
    <id>/blog/2017/trove-journey-1</id>
        <category   scheme="/blog/tags"
                term="Trove"
                label="Trove" />
        <category   scheme="/blog/tags"
                term="OpenStack"
                label="Openstack" />
        <category   scheme="/blog/tags"
                term="Debug"
                label="Debug" />
    
    <content type="html">
                  &lt;p&gt;最近在研究Trove, 这篇文章主要用来记录我在学习Trove的过程中淌过的那些坑．&lt;/p&gt;
&lt;h2&gt;安装&lt;/h2&gt;
&lt;p&gt;这里的安装只讨论开发环境的安装，生产环境的配置后面再单独写吧．&lt;/p&gt;
&lt;p&gt;现在Trove 开发测试环境的安装还算比较简单，它曾经单独搞过一个名为trove-integration的项目用来
帮助开发者搭建开发环境，目前这个项目的绝大部分内容继承到了trove 本身repo的integration目录下．&lt;/p&gt;
&lt;p&gt;目前Trove可以正常通过devstack安装，一般没有问题．不需要额外通过trove-integration安装．&lt;/p&gt;
&lt;h2&gt;Build Guest Image&lt;/h2&gt;
&lt;p&gt;其实这个Topic后面同样针对生产环境也需要单独特殊处理，因为安全性和性能方面的考虑．&lt;/p&gt;
&lt;p&gt;作为测试用，最简单的build Trove guest image的方式就是通过下面这条命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/trove/integration/scripts$ ./trovestack kick-start mysql&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
但在我的环境上，我目前遇到的一个问题是，尽管当前trove所在host的ssh keys已经被注入到了image
里，但是在instance启动时试图连接host获取guest agent代码的时候，仍然会被要求输入一个代码．
目前看来这个密码是我的debian package的密码，我还没有找到如何跳过这个．这个问题会导致
instance获取trove guest agent失败，从而无法启动guest agent.&lt;/p&gt;
&lt;p&gt;对于这种cloud-init已经服务启动相关问题的debug, 可以通过命令来查看log.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;journalctl -f&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
未完待续...&lt;/p&gt;      
          </content>
  </entry>
    <entry>
    <title type="html">Windows Image Support</title>
    <author><name>Feilong Wang</name></author>
    <link href="https://openstacker.github.io/blog/2016/windows_image_support"/>
    <updated>2016-04-11T11:35:00Z</updated>
    <published>2016-04-11T11:35:00Z</published>
    <id>/blog/2016/windows_image_support</id>
        <category   scheme="/blog/tags"
                term="Glance"
                label="Glance" />
        <category   scheme="/blog/tags"
                term="Nova"
                label="Nova" />
        <category   scheme="/blog/tags"
                term="Windows"
                label="Windows" />
        <category   scheme="/blog/tags"
                term="OpenStack"
                label="Openstack" />
    
    <content type="html">
                  &lt;p&gt;最近Catalyst Cloud的公有云服务要支持Windows 镜像，但问题并不是上传个image那么简单，实际操作起来
有很多问题。下面总结一下涉及的一些问题。&lt;/p&gt;
&lt;h2&gt;License&lt;/h2&gt;
&lt;p&gt;使用Windows 镜像和 Linux 镜像的最大不同在于，你得交钱，你得交钱，你得交钱， 给微软。作为一个小规模
的公有云，我们采用的方式是同第三方合作，由第三方提供镜像，而作为公有云我们是透明的，也就是说，虽然
我们向客户对使用Windows镜像收取一定额外的费用，但这些费用会直接付给第三方，我们并不从中收费。&lt;/p&gt;
&lt;h2&gt;Aggregate and Nova scheduler&lt;/h2&gt;
&lt;p&gt;我们目前的设计是对提供Windows镜像支持的host单独创建一个aggregate。这样做主要是便于管理，也便于
对上面谈到的License问题进行计费。同时尽量控制使用最少的host。为了实现将所有创建Windows instance
的请求全部请求schedule 到特定的Windows aggregate 上，需要用到Nova的 AggregateImagePropertiesIsolation 这个
filter, 具体参见&lt;a href=&#34;https://github.com/openstack/nova/blob/master/nova/scheduler/filters/aggregate_image_properties_isolation.py&#34;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个Filter的作用就是对image中的某个属性和在aggregate中的metadata进行匹配，从而实现对aggregate的过滤。
在我们设计中我们使用的是 Glance 中image的内置属性 os_distro。因此，相应地要对Windows aggregate设置同样
的属性和值。这里需要注意的是，如果不想让instance创建在其他某个aggregate中，那么对应的也要给那个aggregate设置同样的属性但是不同的值。&lt;/p&gt;
&lt;h2&gt;Billing（计费）&lt;/h2&gt;
&lt;p&gt;计费是公有云里非常重要的一个环节，infrastructer运行的再稳定，计费弄错了都是白费。针对Windows的
instance我们目前的计费方案是决定在我们后台的OpenERP里对Windows的instance针对其flavor增加若干新的计费条目。
因为不想改Ceilometer, 因为只有在我们自己的&lt;a href=&#34;https://github.com/openstack/distil&#34;&gt;billing系统&lt;/a&gt;里第一次
拿到这个instance的metrics时，通过拿到其image的os_distro属性判断其是否是Windows instance。
然后在计费系统里生成OpenERP的Sales Order line的时候对所有的Windows instance新加一条计费条目。具体patch 参见
&lt;a href=&#34;https://review.openstack.org/297643&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;      
          </content>
  </entry>
    <entry>
    <title type="html">Zaqar Mitaka Release</title>
    <author><name>Feilong Wang</name></author>
    <link href="https://openstacker.github.io/blog/2016/zaqar-mitaka-release"/>
    <updated>2016-04-10T23:58:00Z</updated>
    <published>2016-04-10T23:58:00Z</published>
    <id>/blog/2016/zaqar-mitaka-release</id>
        <category   scheme="/blog/tags"
                term="Zaqar"
                label="Zaqar" />
        <category   scheme="/blog/tags"
                term="OpenStack"
                label="Openstack" />
    
    <content type="html">
                  &lt;p&gt;Zaqar Mitaka Release 是我作为PTL的第一个Release，这恐怕也是我两年多以来参与Zaqar 最投入
的一个Release。Zaqar team的规模并不大，我们只有5个core developer/reviwer, 但在这个
Release中我们完成了很多有价值的工作。这里仅就其中的主要内容做个简单的回顾，也算是我最自己这半年来工作的一个总结。&lt;/p&gt;
&lt;h2&gt;文档&lt;/h2&gt;
&lt;div class=&#34;illustration pull-right icon&#34;&gt;
  &lt;img src=&#34;/media/images/blog/2016/open-book.png&#34;&gt;
&lt;/div&gt;

&lt;p&gt;在这个Cycle里，在Eva Balycheva（Eva是个俄罗斯妹子，当时还是一名实习生，现在已经被提名为Zaqar的Core）的帮助下我们完成
了Zaqar的Configuration Reference Guide. 也就是配置参考指南。这是非常重要的一步，因为我个人在Mitaka
的目标之一就是要提高Zaqar的成熟度，向其他DefCore项目看齐。因此进一步完善文档和示例仍然是我们在Newton　Release的主要目标
之一。&lt;/p&gt;
&lt;p&gt;See &lt;a&gt;http://docs.openstack.org/mitaka/config-reference/image-service.html&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Websocket支持二进制数据传输&lt;/h2&gt;
&lt;div class=&#34;illustration pull-right icon&#34;&gt;
  &lt;img src=&#34;/media/images/blog/2016/order.png&#34;&gt;
&lt;/div&gt;

&lt;p&gt;这是一个工作量不大，但很有value的新feature。在此之前，Zaqar的 websocket传输协议只能传输
文本格式的消息。而通过这个feature, 则可以实现二进制数据传输，从而在一定程度上提升消息传输的性能。&lt;/p&gt;
&lt;p&gt;See https://review.openstack.org/#/c/256978/&lt;/p&gt;
&lt;h2&gt;更多内建的Queue属性&lt;/h2&gt;
&lt;div class=&#34;illustration pull-right icon&#34;&gt;
  &lt;img src=&#34;/media/images/blog/2016/note.png&#34;&gt;
&lt;/div&gt;

&lt;p&gt;这个feature是我个人希望Zaqar赶超SQS/SNS的一小步。目前虽然Zaqar支持 Queue Metadata，但是
这个metadata只能被用户用，也就是Zaqar本身无法通过这些metadata对queue支持一些特定的功能。
举例来说，现在Zaqar默认的message TTL是3600秒，也就是说如果用户在向队列发送消息时不指定TTL，
那么默认的TTL会取自系统设置的默认TTL，用户无法针对不同的queue定义不同的默认TTL。这个feature
解决的就是这个问题。&lt;/p&gt;
&lt;p&gt;See https://review.openstack.org/#/c/265723/&lt;/p&gt;
&lt;div class=&#34;illustration pull-right icon&#34;&gt;
  &lt;img src=&#34;/media/images/blog/2016/download.png&#34;&gt;
&lt;/div&gt;

&lt;h2&gt;Puppet Zaqar&lt;/h2&gt;
&lt;p&gt;Puppet Zaqar其实是我在Mitaka release中玩命推动的一件事情，因为我本意是希望在我们自己的公
有云上部署Zaqar，一件两全其美的事情。不过虽然最后成功完成了，但美中不足的是我们的Operation team
决定今后全面转向Ansible，因此也就有了下面的Ansible Zaqar。&lt;/p&gt;
&lt;p&gt;See https://github.com/openstack/puppet-zaqar&lt;/p&gt;
&lt;div class=&#34;illustration pull-right icon&#34;&gt;
  &lt;img src=&#34;/media/images/blog/2016/download.png&#34;&gt;
&lt;/div&gt;

&lt;h2&gt;Ansible Zaqar&lt;/h2&gt;
&lt;p&gt;Ansible Zaqar的工作正如上面提到的，是因为我们内部的operation team不想再用puppet，所以我不得已
转而推动Ansible 相关的工作。我的同事Kong Ling Xian为Ansible Zaqar的工作付出了大量的心血，在此
表示感谢。&lt;/p&gt;
&lt;p&gt;See https://github.com/openstack/openstack-ansible-os_zaqar&lt;/p&gt;
&lt;h2&gt;Zaqar UI&lt;/h2&gt;
&lt;div class=&#34;illustration pull-right icon&#34;&gt;
  &lt;img src=&#34;/media/images/blog/2016/side-menu.png&#34;&gt;
&lt;/div&gt;

&lt;p&gt;在几个Horizon哥们的帮助下，我们终于创建了属于Zaqar的Horizon Plugin。在此特别向Horizon team
的Thai Tran, Shu Muto和 David Cusatis表示感谢，虽然我估计他们看不懂中文。目前只支持Queue和
Subscription的相关操作。Pool和Flavor的支持会在Newton Release完成。&lt;/p&gt;
&lt;p&gt;See https://github.com/openstack/zaqar-ui&lt;/p&gt;
&lt;div class=&#34;illustration pull-right icon&#34;&gt;
  &lt;img src=&#34;/media/images/blog/2016/notification.png&#34;&gt;
&lt;/div&gt;

&lt;h2&gt;Zaqar Client&lt;/h2&gt;
&lt;p&gt;我个人对 Client 和Horizon Plugin非常看中，因为我觉得这两个interface是Zaqar的潜在用户了解
Zaqar的主要方式，但遗憾的是，我们在过去精力主要放在了server端，没有给二者以足够的重视。因此在
Mitaka release, 我们用了整整一个Release的时间，我们终于将客户端的所有功能基本补齐了。&lt;/p&gt;      
          </content>
  </entry>
  


</feed>